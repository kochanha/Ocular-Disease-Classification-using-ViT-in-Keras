{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "image classification using vision transformer eye ACGMN patch16",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j93HxQcDj3At",
        "outputId": "d4ffd84d-56ce-4517-a0d0-2c7facbcf4fb"
      },
      "source": [
        "!pip install -U tensorflow-addons"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting tensorflow-addons\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/66/4b/e893d194e626c24b3df2253066aa418f46a432fdb68250cde14bf9bb0700/tensorflow_addons-0.13.0-cp37-cp37m-manylinux2010_x86_64.whl (679kB)\n",
            "\r\u001b[K     |▌                               | 10kB 18.2MB/s eta 0:00:01\r\u001b[K     |█                               | 20kB 19.0MB/s eta 0:00:01\r\u001b[K     |█▌                              | 30kB 18.6MB/s eta 0:00:01\r\u001b[K     |██                              | 40kB 19.1MB/s eta 0:00:01\r\u001b[K     |██▍                             | 51kB 21.2MB/s eta 0:00:01\r\u001b[K     |███                             | 61kB 23.3MB/s eta 0:00:01\r\u001b[K     |███▍                            | 71kB 24.4MB/s eta 0:00:01\r\u001b[K     |███▉                            | 81kB 25.1MB/s eta 0:00:01\r\u001b[K     |████▍                           | 92kB 26.1MB/s eta 0:00:01\r\u001b[K     |████▉                           | 102kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 112kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████▉                          | 122kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████▎                         | 133kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████▊                         | 143kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 153kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 163kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 174kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 184kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 194kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████▋                      | 204kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 215kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 225kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████                     | 235kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████▋                    | 245kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████                    | 256kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████▌                   | 266kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 276kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████▌                  | 286kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 296kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 307kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 317kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 327kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████                | 337kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 348kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 358kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████▍              | 368kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 378kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████████▎             | 389kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████████▉             | 399kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 409kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 419kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████████▎           | 430kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 440kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████▏          | 450kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████▊          | 460kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████▏         | 471kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████▋         | 481kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 491kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████▋        | 501kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 512kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████▋       | 522kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 532kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▌      | 542kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 552kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 563kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 573kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 583kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 593kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 604kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 614kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 624kB 27.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 634kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 645kB 27.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 655kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 665kB 27.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 675kB 27.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 686kB 27.4MB/s \n",
            "\u001b[?25hRequirement already satisfied, skipping upgrade: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (2.7.1)\n",
            "Installing collected packages: tensorflow-addons\n",
            "Successfully installed tensorflow-addons-0.13.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NBrRIaicjI1L"
      },
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "import tensorflow_addons as tfa"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_uXwmSaa_DiF",
        "outputId": "249f7f08-d79d-44f4-e020-140b919ae877"
      },
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "input_width = 128\n",
        "input_height = 128\n",
        "input_channel = 3\n",
        "img_shape = [input_width, input_height, input_channel]\n",
        "interpolation_method = \"bilinear\"\n",
        "num_classes = 5\n",
        "\n",
        "train_path = '/content/drive/MyDrive/dataset_split_512_ACGMN/train'\n",
        "valid_path = '/content/drive/MyDrive/dataset_split_512_ACGMN/valid'\n",
        "test_path = '/content/drive/MyDrive/dataset_split_512_ACGMN/test'\n",
        "\n",
        "train_dategen = ImageDataGenerator()\n",
        "train_generator = train_dategen.flow_from_directory(\n",
        "    train_path,\n",
        "    target_size=(input_height, input_width),\n",
        "    batch_size=2405,\n",
        "    shuffle = True,\n",
        "    interpolation = interpolation_method,\n",
        "    class_mode = 'sparse')\n",
        "\n",
        "val_dategen = ImageDataGenerator()\n",
        "val_generator = val_dategen.flow_from_directory(\n",
        "    valid_path,\n",
        "    target_size=(input_height, input_width),\n",
        "    batch_size=348,\n",
        "    shuffle = False,\n",
        "    interpolation = interpolation_method,\n",
        "    class_mode = 'sparse')\n",
        "\n",
        "test_dategen = ImageDataGenerator()\n",
        "test_generator = test_dategen.flow_from_directory(\n",
        "    test_path,\n",
        "    target_size=(input_height, input_width),\n",
        "    batch_size=686,\n",
        "    shuffle = False,\n",
        "    interpolation = interpolation_method,\n",
        "    class_mode = 'sparse')\n",
        "\n",
        "x_train, y_train = train_generator[0]\n",
        "x_test, y_test = test_generator[0]\n",
        "x_val, y_val = val_generator[0]\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2405 images belonging to 5 classes.\n",
            "Found 348 images belonging to 5 classes.\n",
            "Found 686 images belonging to 5 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rWiBevlTjU7U",
        "outputId": "16ee31c1-20fe-4cc8-a64a-e8aabfc64bc7"
      },
      "source": [
        "num_classes = 5\n",
        "input_shape = (128, 128, 3)\n",
        "\n",
        "print(f\"x_train shape: {x_train.shape} - y_train shape: {y_train.shape}\")\n",
        "print(f\"x_test shape: {x_test.shape} - y_test shape: {y_test.shape}\")"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "x_train shape: (2405, 128, 128, 3) - y_train shape: (2405,)\n",
            "x_test shape: (686, 128, 128, 3) - y_test shape: (686,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H6S_SK8kjYY5"
      },
      "source": [
        "learning_rate = 0.001\n",
        "weight_decay = 0.0001\n",
        "batch_size = 64\n",
        "num_epochs = 250\n",
        "image_size = 128  # We'll resize input images to this size\n",
        "patch_size = 16  # Size of the patches to be extract from the input images\n",
        "num_patches = (image_size // patch_size) ** 2\n",
        "projection_dim = 64\n",
        "num_heads = 12\n",
        "transformer_units = [\n",
        "    projection_dim * 2,\n",
        "    projection_dim,\n",
        "]  # Size of the transformer layers\n",
        "transformer_layers = 12\n",
        "mlp_head_units = [2048, 1024]  # Size of the dense layers of the final classifier"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oYCSuNjfjbAh"
      },
      "source": [
        "data_augmentation = keras.Sequential(\n",
        "    [\n",
        "        layers.experimental.preprocessing.Normalization(),\n",
        "        # layers.experimental.preprocessing.Resizing(image_size, image_size),\n",
        "        layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n",
        "        layers.experimental.preprocessing.RandomRotation(factor=0.02),\n",
        "        layers.experimental.preprocessing.RandomZoom(\n",
        "            height_factor=0.2, width_factor=0.2\n",
        "        ),\n",
        "    ],\n",
        "    name=\"data_augmentation\",\n",
        ")\n",
        "# Compute the mean and the variance of the training data for normalization.\n",
        "data_augmentation.layers[0].adapt(x_train)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sJdKR3P5jdvA"
      },
      "source": [
        "def mlp(x, hidden_units, dropout_rate):\n",
        "    for units in hidden_units:\n",
        "        x = layers.Dense(units, activation=tf.nn.gelu)(x)\n",
        "        x = layers.Dropout(dropout_rate)(x)\n",
        "    return x"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TcAqLeZijhmH"
      },
      "source": [
        "class Patches(layers.Layer):\n",
        "    def __init__(self, patch_size):\n",
        "        super(Patches, self).__init__()\n",
        "        self.patch_size = patch_size\n",
        "\n",
        "    def call(self, images):\n",
        "        batch_size = tf.shape(images)[0]\n",
        "        patches = tf.image.extract_patches(\n",
        "            images=images,\n",
        "            sizes=[1, self.patch_size, self.patch_size, 1],\n",
        "            strides=[1, self.patch_size, self.patch_size, 1],\n",
        "            rates=[1, 1, 1, 1],\n",
        "            padding=\"VALID\",\n",
        "        )\n",
        "        patch_dims = patches.shape[-1]\n",
        "        patches = tf.reshape(patches, [batch_size, -1, patch_dims])\n",
        "        return patches"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "FRyoDm-Rjji6",
        "outputId": "3a53ee10-c9d4-40fb-9b91-9aac88881fb0"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(4, 4))\n",
        "image = x_train[np.random.choice(range(x_train.shape[0]))]\n",
        "plt.imshow(image.astype(\"uint8\"))\n",
        "plt.axis(\"off\")\n",
        "\n",
        "resized_image = tf.image.resize(\n",
        "    tf.convert_to_tensor([image]), size=(image_size, image_size)\n",
        ")\n",
        "patches = Patches(patch_size)(resized_image)\n",
        "print(f\"Image size: {image_size} X {image_size}\")\n",
        "print(f\"Patch size: {patch_size} X {patch_size}\")\n",
        "print(f\"Patches per image: {patches.shape[1]}\")\n",
        "print(f\"Elements per patch: {patches.shape[-1]}\")\n",
        "\n",
        "n = int(np.sqrt(patches.shape[1]))\n",
        "plt.figure(figsize=(4, 4))\n",
        "for i, patch in enumerate(patches[0]):\n",
        "    ax = plt.subplot(n, n, i + 1)\n",
        "    patch_img = tf.reshape(patch, (patch_size, patch_size, 3))\n",
        "    plt.imshow(patch_img.numpy().astype(\"uint8\"))\n",
        "    plt.axis(\"off\")"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Image size: 128 X 128\n",
            "Patch size: 16 X 16\n",
            "Patches per image: 64\n",
            "Elements per patch: 768\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 64 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uSMTbHfyjmek"
      },
      "source": [
        "class PatchEncoder(layers.Layer):\n",
        "    def __init__(self, num_patches, projection_dim):\n",
        "        super(PatchEncoder, self).__init__()\n",
        "        self.num_patches = num_patches\n",
        "        self.projection = layers.Dense(units=projection_dim)\n",
        "        self.position_embedding = layers.Embedding(\n",
        "            input_dim=num_patches, output_dim=projection_dim\n",
        "        )\n",
        "\n",
        "    def call(self, patch):\n",
        "        positions = tf.range(start=0, limit=self.num_patches, delta=1)\n",
        "        encoded = self.projection(patch) + self.position_embedding(positions)\n",
        "        return encoded"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WhIL0-HRjqPR"
      },
      "source": [
        "def create_vit_classifier():\n",
        "    inputs = layers.Input(shape=input_shape)\n",
        "    # Augment data.\n",
        "    augmented = data_augmentation(inputs)\n",
        "    # Create patches.\n",
        "    patches = Patches(patch_size)(augmented)\n",
        "    # Encode patches.\n",
        "    encoded_patches = PatchEncoder(num_patches, projection_dim)(patches)\n",
        "\n",
        "    # Create multiple layers of the Transformer block.\n",
        "    for _ in range(transformer_layers):\n",
        "        # Layer normalization 1.\n",
        "        x1 = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n",
        "        # Create a multi-head attention layer.\n",
        "        attention_output = layers.MultiHeadAttention(\n",
        "            num_heads=num_heads, key_dim=projection_dim, dropout=0.1\n",
        "        )(x1, x1)\n",
        "        # Skip connection 1.\n",
        "        x2 = layers.Add()([attention_output, encoded_patches])\n",
        "        # Layer normalization 2.\n",
        "        x3 = layers.LayerNormalization(epsilon=1e-6)(x2)\n",
        "        # MLP.\n",
        "        x3 = mlp(x3, hidden_units=transformer_units, dropout_rate=0.1)\n",
        "        # Skip connection 2.\n",
        "        encoded_patches = layers.Add()([x3, x2])\n",
        "\n",
        "    # Create a [batch_size, projection_dim] tensor.\n",
        "    representation = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n",
        "    representation = layers.Flatten()(representation)\n",
        "    representation = layers.Dropout(0.5)(representation)\n",
        "    # Add MLP.\n",
        "    features = mlp(representation, hidden_units=mlp_head_units, dropout_rate=0.5)\n",
        "    # Classify outputs.\n",
        "    logits = layers.Dense(num_classes)(features)\n",
        "    # Create the Keras model.\n",
        "    model = keras.Model(inputs=inputs, outputs=logits)\n",
        "    return model"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "KkyrRl0Sjskb",
        "outputId": "f0df22e7-e98a-427f-d8b4-f29113b47837"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd \n",
        "from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n",
        "# from sklearn.metrics import top_k_accuracy_score\n",
        "import seaborn as sns\n",
        "\n",
        "def run_experiment(model):\n",
        "    optimizer = tfa.optimizers.AdamW(\n",
        "        learning_rate=learning_rate, weight_decay=weight_decay\n",
        "    )\n",
        "\n",
        "    model.compile(\n",
        "        optimizer=optimizer,\n",
        "        loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "        metrics=[\n",
        "            keras.metrics.SparseCategoricalAccuracy(name=\"accuracy\"),\n",
        "            keras.metrics.SparseTopKCategoricalAccuracy(2, name=\"top-2-accuracy\"),\n",
        "        ],\n",
        "    )\n",
        "\n",
        "    checkpoint_filepath = \"transformer_patch16.h5\"\n",
        "    checkpoint_callback = keras.callbacks.ModelCheckpoint(\n",
        "        checkpoint_filepath,\n",
        "        monitor=\"val_accuracy\",\n",
        "        save_best_only=True,\n",
        "        save_weights_only=True,\n",
        "        verbose = 2\n",
        "    )\n",
        "\n",
        "    history = model.fit(\n",
        "        x=x_train,\n",
        "        y=y_train,\n",
        "        batch_size=batch_size,\n",
        "        epochs=num_epochs,\n",
        "        validation_data = (x_test, y_test),\n",
        "        callbacks=[checkpoint_callback],\n",
        "    )\n",
        "\n",
        "\n",
        "\n",
        "    model.load_weights(checkpoint_filepath)\n",
        "    _, accuracy, top_2_accuracy = model.evaluate(x_test, y_test)\n",
        "\n",
        "    print(\"--Evaluate--\")\n",
        "    # model = model.load_weights(checkpoint_filepath)\n",
        "    scores = model.evaluate(test_generator)\n",
        "    print (\"%s: %.2f%%\" %('Test top-1 accuracy', scores[1]*100))\n",
        "\n",
        "    Y_pred = model.predict_generator(test_generator)\n",
        "    # print (\"%s: %.2f%%\" %('Test top-2 accuracy', top_k_accuracy_score(test_generator.classes, Y_pred, k=2)*100))\n",
        "\n",
        "    y_pred = np.argmax(Y_pred, axis=1)\n",
        "    target_names = test_generator.class_indices.keys()\n",
        "\n",
        "    print('Confusion Matrix')\n",
        "    con_mat = confusion_matrix(test_generator.classes, y_pred)\n",
        "    con_mat_norm = np.around(con_mat.astype('float') / con_mat.sum(axis=1)[:, np.newaxis], decimals=2)\n",
        "    print(con_mat)\n",
        "\n",
        "    con_mat_df = pd.DataFrame(con_mat_norm,\n",
        "                            index = target_names,\n",
        "                            columns = target_names)\n",
        "    figure = plt.figure(figsize = (8,8))\n",
        "    sns.heatmap(con_mat_df, annot=True, cmap=plt.cm.Blues)\n",
        "    plt.tight_layout()\n",
        "    plt.ylabel(\"True Label\")\n",
        "    plt.xlabel('Predicted Label')\n",
        "    plt.show()\n",
        "\n",
        "    acc = history.history['accuracy']\n",
        "    val_acc = history.history['val_accuracy']\n",
        "\n",
        "    loss = history.history['loss']\n",
        "    val_loss = history.history['val_loss']\n",
        "\n",
        "    plt.figure(figsize=(8, 8))\n",
        "    plt.subplot(2, 1, 1)\n",
        "    plt.plot(acc, label='Training Accuracy')\n",
        "    plt.plot(val_acc, label='Validation Accuracy')\n",
        "    plt.legend(loc='lower right')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.ylim([min(plt.ylim()),1])\n",
        "    plt.title('Training and Validation Accuracy')\n",
        "\n",
        "    plt.subplot(2, 1, 2)\n",
        "    plt.plot(loss, label='Training Loss')\n",
        "    plt.plot(val_loss, label='Validation Loss')\n",
        "    plt.legend(loc='upper right')\n",
        "    plt.ylabel('Cross Entropy')\n",
        "    plt.ylim([0,1.0])\n",
        "    plt.title('Training and Validation Loss')\n",
        "    plt.xlabel('epoch')\n",
        "    plt.show()\n",
        "\n",
        "    return history\n",
        "\n",
        "\n",
        "vit_classifier = create_vit_classifier()\n",
        "history = run_experiment(vit_classifier)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/250\n",
            "38/38 [==============================] - 22s 177ms/step - loss: 2.9431 - accuracy: 0.5969 - top-2-accuracy: 0.7313 - val_loss: 1.0499 - val_accuracy: 0.6472 - val_top-2-accuracy: 0.8338\n",
            "\n",
            "Epoch 00001: val_accuracy improved from -inf to 0.64723, saving model to /content/transformer_patch8.h5\n",
            "Epoch 2/250\n",
            "38/38 [==============================] - 5s 138ms/step - loss: 1.0960 - accuracy: 0.7133 - top-2-accuracy: 0.8226 - val_loss: 0.9055 - val_accuracy: 0.7624 - val_top-2-accuracy: 0.8499\n",
            "\n",
            "Epoch 00002: val_accuracy improved from 0.64723 to 0.76239, saving model to /content/transformer_patch8.h5\n",
            "Epoch 3/250\n",
            "38/38 [==============================] - 5s 138ms/step - loss: 0.9984 - accuracy: 0.7403 - top-2-accuracy: 0.8382 - val_loss: 0.9596 - val_accuracy: 0.7638 - val_top-2-accuracy: 0.8571\n",
            "\n",
            "Epoch 00003: val_accuracy improved from 0.76239 to 0.76385, saving model to /content/transformer_patch8.h5\n",
            "Epoch 4/250\n",
            "38/38 [==============================] - 5s 137ms/step - loss: 0.9523 - accuracy: 0.7584 - top-2-accuracy: 0.8462 - val_loss: 0.8995 - val_accuracy: 0.7653 - val_top-2-accuracy: 0.8513\n",
            "\n",
            "Epoch 00004: val_accuracy improved from 0.76385 to 0.76531, saving model to /content/transformer_patch8.h5\n",
            "Epoch 5/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.9306 - accuracy: 0.7479 - top-2-accuracy: 0.8456 - val_loss: 0.9134 - val_accuracy: 0.7711 - val_top-2-accuracy: 0.8746\n",
            "\n",
            "Epoch 00005: val_accuracy improved from 0.76531 to 0.77114, saving model to /content/transformer_patch8.h5\n",
            "Epoch 6/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.9202 - accuracy: 0.7417 - top-2-accuracy: 0.8628 - val_loss: 0.8205 - val_accuracy: 0.7741 - val_top-2-accuracy: 0.8790\n",
            "\n",
            "Epoch 00006: val_accuracy improved from 0.77114 to 0.77405, saving model to /content/transformer_patch8.h5\n",
            "Epoch 7/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.8663 - accuracy: 0.7692 - top-2-accuracy: 0.8659 - val_loss: 0.8075 - val_accuracy: 0.7755 - val_top-2-accuracy: 0.8630\n",
            "\n",
            "Epoch 00007: val_accuracy improved from 0.77405 to 0.77551, saving model to /content/transformer_patch8.h5\n",
            "Epoch 8/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.8734 - accuracy: 0.7524 - top-2-accuracy: 0.8655 - val_loss: 0.7676 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.8921\n",
            "\n",
            "Epoch 00008: val_accuracy improved from 0.77551 to 0.78426, saving model to /content/transformer_patch8.h5\n",
            "Epoch 9/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.8096 - accuracy: 0.7762 - top-2-accuracy: 0.8839 - val_loss: 0.8095 - val_accuracy: 0.7741 - val_top-2-accuracy: 0.8863\n",
            "\n",
            "Epoch 00009: val_accuracy did not improve from 0.78426\n",
            "Epoch 10/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.8116 - accuracy: 0.7736 - top-2-accuracy: 0.8812 - val_loss: 0.7702 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.8936\n",
            "\n",
            "Epoch 00010: val_accuracy improved from 0.78426 to 0.78863, saving model to /content/transformer_patch8.h5\n",
            "Epoch 11/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.8234 - accuracy: 0.7656 - top-2-accuracy: 0.8798 - val_loss: 0.7292 - val_accuracy: 0.7784 - val_top-2-accuracy: 0.9067\n",
            "\n",
            "Epoch 00011: val_accuracy did not improve from 0.78863\n",
            "Epoch 12/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.8220 - accuracy: 0.7630 - top-2-accuracy: 0.8765 - val_loss: 0.7347 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9038\n",
            "\n",
            "Epoch 00012: val_accuracy improved from 0.78863 to 0.79300, saving model to /content/transformer_patch8.h5\n",
            "Epoch 13/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.7664 - accuracy: 0.7672 - top-2-accuracy: 0.9020 - val_loss: 0.7303 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9038\n",
            "\n",
            "Epoch 00013: val_accuracy did not improve from 0.79300\n",
            "Epoch 14/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.7470 - accuracy: 0.7809 - top-2-accuracy: 0.9090 - val_loss: 0.7755 - val_accuracy: 0.7726 - val_top-2-accuracy: 0.9009\n",
            "\n",
            "Epoch 00014: val_accuracy did not improve from 0.79300\n",
            "Epoch 15/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.7991 - accuracy: 0.7540 - top-2-accuracy: 0.8905 - val_loss: 0.7097 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9125\n",
            "\n",
            "Epoch 00015: val_accuracy did not improve from 0.79300\n",
            "Epoch 16/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.7585 - accuracy: 0.7866 - top-2-accuracy: 0.8989 - val_loss: 0.7443 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9082\n",
            "\n",
            "Epoch 00016: val_accuracy did not improve from 0.79300\n",
            "Epoch 17/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.7589 - accuracy: 0.7953 - top-2-accuracy: 0.9046 - val_loss: 0.7181 - val_accuracy: 0.7857 - val_top-2-accuracy: 0.9082\n",
            "\n",
            "Epoch 00017: val_accuracy did not improve from 0.79300\n",
            "Epoch 18/250\n",
            "38/38 [==============================] - 5s 139ms/step - loss: 0.7178 - accuracy: 0.7792 - top-2-accuracy: 0.9007 - val_loss: 0.6996 - val_accuracy: 0.7901 - val_top-2-accuracy: 0.9198\n",
            "\n",
            "Epoch 00018: val_accuracy did not improve from 0.79300\n",
            "Epoch 19/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.7299 - accuracy: 0.7786 - top-2-accuracy: 0.9158 - val_loss: 0.7093 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9169\n",
            "\n",
            "Epoch 00019: val_accuracy did not improve from 0.79300\n",
            "Epoch 20/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6997 - accuracy: 0.7908 - top-2-accuracy: 0.9174 - val_loss: 0.7193 - val_accuracy: 0.7901 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00020: val_accuracy did not improve from 0.79300\n",
            "Epoch 21/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.6741 - accuracy: 0.7926 - top-2-accuracy: 0.9224 - val_loss: 0.7062 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9169\n",
            "\n",
            "Epoch 00021: val_accuracy did not improve from 0.79300\n",
            "Epoch 22/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.6630 - accuracy: 0.7960 - top-2-accuracy: 0.9254 - val_loss: 0.6777 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9169\n",
            "\n",
            "Epoch 00022: val_accuracy improved from 0.79300 to 0.79592, saving model to /content/transformer_patch8.h5\n",
            "Epoch 23/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6816 - accuracy: 0.7918 - top-2-accuracy: 0.9254 - val_loss: 0.6812 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9169\n",
            "\n",
            "Epoch 00023: val_accuracy did not improve from 0.79592\n",
            "Epoch 24/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6824 - accuracy: 0.7881 - top-2-accuracy: 0.9107 - val_loss: 0.6781 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9169\n",
            "\n",
            "Epoch 00024: val_accuracy did not improve from 0.79592\n",
            "Epoch 25/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.6560 - accuracy: 0.7974 - top-2-accuracy: 0.9266 - val_loss: 0.7292 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9082\n",
            "\n",
            "Epoch 00025: val_accuracy did not improve from 0.79592\n",
            "Epoch 26/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6455 - accuracy: 0.7997 - top-2-accuracy: 0.9242 - val_loss: 0.7177 - val_accuracy: 0.7857 - val_top-2-accuracy: 0.9169\n",
            "\n",
            "Epoch 00026: val_accuracy did not improve from 0.79592\n",
            "Epoch 27/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.6434 - accuracy: 0.7950 - top-2-accuracy: 0.9384 - val_loss: 0.7203 - val_accuracy: 0.7711 - val_top-2-accuracy: 0.9052\n",
            "\n",
            "Epoch 00027: val_accuracy did not improve from 0.79592\n",
            "Epoch 28/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6669 - accuracy: 0.7835 - top-2-accuracy: 0.9280 - val_loss: 0.7052 - val_accuracy: 0.7770 - val_top-2-accuracy: 0.9125\n",
            "\n",
            "Epoch 00028: val_accuracy did not improve from 0.79592\n",
            "Epoch 29/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6437 - accuracy: 0.7917 - top-2-accuracy: 0.9272 - val_loss: 0.6856 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9213\n",
            "\n",
            "Epoch 00029: val_accuracy improved from 0.79592 to 0.79738, saving model to /content/transformer_patch8.h5\n",
            "Epoch 30/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6358 - accuracy: 0.7973 - top-2-accuracy: 0.9281 - val_loss: 0.6656 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00030: val_accuracy improved from 0.79738 to 0.80175, saving model to /content/transformer_patch8.h5\n",
            "Epoch 31/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6639 - accuracy: 0.7918 - top-2-accuracy: 0.9180 - val_loss: 0.6628 - val_accuracy: 0.8003 - val_top-2-accuracy: 0.9213\n",
            "\n",
            "Epoch 00031: val_accuracy did not improve from 0.80175\n",
            "Epoch 32/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.6217 - accuracy: 0.8125 - top-2-accuracy: 0.9432 - val_loss: 0.7248 - val_accuracy: 0.7638 - val_top-2-accuracy: 0.9242\n",
            "\n",
            "Epoch 00032: val_accuracy did not improve from 0.80175\n",
            "Epoch 33/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.6227 - accuracy: 0.8021 - top-2-accuracy: 0.9370 - val_loss: 0.6498 - val_accuracy: 0.8105 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00033: val_accuracy improved from 0.80175 to 0.81050, saving model to /content/transformer_patch8.h5\n",
            "Epoch 34/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.5842 - accuracy: 0.8149 - top-2-accuracy: 0.9430 - val_loss: 0.6832 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9140\n",
            "\n",
            "Epoch 00034: val_accuracy did not improve from 0.81050\n",
            "Epoch 35/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.5936 - accuracy: 0.8244 - top-2-accuracy: 0.9346 - val_loss: 0.6675 - val_accuracy: 0.7901 - val_top-2-accuracy: 0.9111\n",
            "\n",
            "Epoch 00035: val_accuracy did not improve from 0.81050\n",
            "Epoch 36/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.5580 - accuracy: 0.8194 - top-2-accuracy: 0.9484 - val_loss: 0.6714 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9227\n",
            "\n",
            "Epoch 00036: val_accuracy did not improve from 0.81050\n",
            "Epoch 37/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.5636 - accuracy: 0.8184 - top-2-accuracy: 0.9390 - val_loss: 0.6613 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00037: val_accuracy did not improve from 0.81050\n",
            "Epoch 38/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.5407 - accuracy: 0.8072 - top-2-accuracy: 0.9517 - val_loss: 0.6611 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00038: val_accuracy did not improve from 0.81050\n",
            "Epoch 39/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.5702 - accuracy: 0.8046 - top-2-accuracy: 0.9454 - val_loss: 0.6892 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9155\n",
            "\n",
            "Epoch 00039: val_accuracy did not improve from 0.81050\n",
            "Epoch 40/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.5616 - accuracy: 0.8262 - top-2-accuracy: 0.9534 - val_loss: 0.6967 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00040: val_accuracy did not improve from 0.81050\n",
            "Epoch 41/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.5547 - accuracy: 0.8351 - top-2-accuracy: 0.9495 - val_loss: 0.7130 - val_accuracy: 0.7857 - val_top-2-accuracy: 0.9169\n",
            "\n",
            "Epoch 00041: val_accuracy did not improve from 0.81050\n",
            "Epoch 42/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.5247 - accuracy: 0.8290 - top-2-accuracy: 0.9591 - val_loss: 0.6930 - val_accuracy: 0.7813 - val_top-2-accuracy: 0.9184\n",
            "\n",
            "Epoch 00042: val_accuracy did not improve from 0.81050\n",
            "Epoch 43/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.5521 - accuracy: 0.8120 - top-2-accuracy: 0.9546 - val_loss: 0.7043 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9096\n",
            "\n",
            "Epoch 00043: val_accuracy did not improve from 0.81050\n",
            "Epoch 44/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.5061 - accuracy: 0.8425 - top-2-accuracy: 0.9577 - val_loss: 0.6627 - val_accuracy: 0.8105 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00044: val_accuracy did not improve from 0.81050\n",
            "Epoch 45/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.5104 - accuracy: 0.8329 - top-2-accuracy: 0.9624 - val_loss: 0.7006 - val_accuracy: 0.7828 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00045: val_accuracy did not improve from 0.81050\n",
            "Epoch 46/250\n",
            "38/38 [==============================] - 5s 140ms/step - loss: 0.5097 - accuracy: 0.8262 - top-2-accuracy: 0.9587 - val_loss: 0.6853 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9227\n",
            "\n",
            "Epoch 00046: val_accuracy did not improve from 0.81050\n",
            "Epoch 47/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.5064 - accuracy: 0.8354 - top-2-accuracy: 0.9575 - val_loss: 0.7128 - val_accuracy: 0.7901 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00047: val_accuracy did not improve from 0.81050\n",
            "Epoch 48/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4890 - accuracy: 0.8349 - top-2-accuracy: 0.9537 - val_loss: 0.6495 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00048: val_accuracy did not improve from 0.81050\n",
            "Epoch 49/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.4727 - accuracy: 0.8397 - top-2-accuracy: 0.9636 - val_loss: 0.7352 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00049: val_accuracy did not improve from 0.81050\n",
            "Epoch 50/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4801 - accuracy: 0.8394 - top-2-accuracy: 0.9698 - val_loss: 0.7036 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9227\n",
            "\n",
            "Epoch 00050: val_accuracy did not improve from 0.81050\n",
            "Epoch 51/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4913 - accuracy: 0.8309 - top-2-accuracy: 0.9596 - val_loss: 0.6539 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00051: val_accuracy did not improve from 0.81050\n",
            "Epoch 52/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.4595 - accuracy: 0.8469 - top-2-accuracy: 0.9573 - val_loss: 0.6529 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00052: val_accuracy did not improve from 0.81050\n",
            "Epoch 53/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4676 - accuracy: 0.8361 - top-2-accuracy: 0.9645 - val_loss: 0.7354 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00053: val_accuracy did not improve from 0.81050\n",
            "Epoch 54/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.4944 - accuracy: 0.8301 - top-2-accuracy: 0.9551 - val_loss: 0.6976 - val_accuracy: 0.8076 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00054: val_accuracy did not improve from 0.81050\n",
            "Epoch 55/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4820 - accuracy: 0.8440 - top-2-accuracy: 0.9593 - val_loss: 0.6731 - val_accuracy: 0.8076 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00055: val_accuracy did not improve from 0.81050\n",
            "Epoch 56/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4391 - accuracy: 0.8452 - top-2-accuracy: 0.9642 - val_loss: 0.6803 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00056: val_accuracy did not improve from 0.81050\n",
            "Epoch 57/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.4629 - accuracy: 0.8333 - top-2-accuracy: 0.9662 - val_loss: 0.6961 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00057: val_accuracy did not improve from 0.81050\n",
            "Epoch 58/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.4554 - accuracy: 0.8430 - top-2-accuracy: 0.9720 - val_loss: 0.6456 - val_accuracy: 0.8178 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00058: val_accuracy improved from 0.81050 to 0.81778, saving model to /content/transformer_patch8.h5\n",
            "Epoch 59/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.4552 - accuracy: 0.8494 - top-2-accuracy: 0.9649 - val_loss: 0.6922 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00059: val_accuracy did not improve from 0.81778\n",
            "Epoch 60/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.4618 - accuracy: 0.8419 - top-2-accuracy: 0.9656 - val_loss: 0.6993 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00060: val_accuracy did not improve from 0.81778\n",
            "Epoch 61/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4328 - accuracy: 0.8449 - top-2-accuracy: 0.9734 - val_loss: 0.6885 - val_accuracy: 0.8003 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00061: val_accuracy did not improve from 0.81778\n",
            "Epoch 62/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4157 - accuracy: 0.8549 - top-2-accuracy: 0.9721 - val_loss: 0.7383 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00062: val_accuracy did not improve from 0.81778\n",
            "Epoch 63/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4355 - accuracy: 0.8534 - top-2-accuracy: 0.9705 - val_loss: 0.7022 - val_accuracy: 0.8003 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00063: val_accuracy did not improve from 0.81778\n",
            "Epoch 64/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4348 - accuracy: 0.8422 - top-2-accuracy: 0.9732 - val_loss: 0.7371 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00064: val_accuracy did not improve from 0.81778\n",
            "Epoch 65/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4059 - accuracy: 0.8554 - top-2-accuracy: 0.9735 - val_loss: 0.7226 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00065: val_accuracy did not improve from 0.81778\n",
            "Epoch 66/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.3710 - accuracy: 0.8752 - top-2-accuracy: 0.9821 - val_loss: 0.7312 - val_accuracy: 0.8105 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00066: val_accuracy did not improve from 0.81778\n",
            "Epoch 67/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.4190 - accuracy: 0.8624 - top-2-accuracy: 0.9757 - val_loss: 0.7042 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00067: val_accuracy did not improve from 0.81778\n",
            "Epoch 68/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3972 - accuracy: 0.8631 - top-2-accuracy: 0.9755 - val_loss: 0.7037 - val_accuracy: 0.8061 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00068: val_accuracy did not improve from 0.81778\n",
            "Epoch 69/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.3640 - accuracy: 0.8688 - top-2-accuracy: 0.9787 - val_loss: 0.7382 - val_accuracy: 0.7901 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00069: val_accuracy did not improve from 0.81778\n",
            "Epoch 70/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3908 - accuracy: 0.8594 - top-2-accuracy: 0.9726 - val_loss: 0.7207 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00070: val_accuracy did not improve from 0.81778\n",
            "Epoch 71/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3875 - accuracy: 0.8604 - top-2-accuracy: 0.9760 - val_loss: 0.7253 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00071: val_accuracy did not improve from 0.81778\n",
            "Epoch 72/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3429 - accuracy: 0.8657 - top-2-accuracy: 0.9849 - val_loss: 0.7597 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00072: val_accuracy did not improve from 0.81778\n",
            "Epoch 73/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3483 - accuracy: 0.8756 - top-2-accuracy: 0.9791 - val_loss: 0.8224 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00073: val_accuracy did not improve from 0.81778\n",
            "Epoch 74/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.3454 - accuracy: 0.8778 - top-2-accuracy: 0.9828 - val_loss: 0.7375 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9242\n",
            "\n",
            "Epoch 00074: val_accuracy did not improve from 0.81778\n",
            "Epoch 75/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.3537 - accuracy: 0.8716 - top-2-accuracy: 0.9849 - val_loss: 0.8117 - val_accuracy: 0.8105 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00075: val_accuracy did not improve from 0.81778\n",
            "Epoch 76/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3313 - accuracy: 0.8868 - top-2-accuracy: 0.9832 - val_loss: 0.8142 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9213\n",
            "\n",
            "Epoch 00076: val_accuracy did not improve from 0.81778\n",
            "Epoch 77/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3217 - accuracy: 0.8795 - top-2-accuracy: 0.9896 - val_loss: 0.7728 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00077: val_accuracy did not improve from 0.81778\n",
            "Epoch 78/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3410 - accuracy: 0.8806 - top-2-accuracy: 0.9840 - val_loss: 0.8896 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00078: val_accuracy did not improve from 0.81778\n",
            "Epoch 79/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.3342 - accuracy: 0.8805 - top-2-accuracy: 0.9876 - val_loss: 0.8058 - val_accuracy: 0.7813 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00079: val_accuracy did not improve from 0.81778\n",
            "Epoch 80/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3373 - accuracy: 0.8851 - top-2-accuracy: 0.9775 - val_loss: 0.8455 - val_accuracy: 0.7741 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00080: val_accuracy did not improve from 0.81778\n",
            "Epoch 81/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2895 - accuracy: 0.8981 - top-2-accuracy: 0.9879 - val_loss: 0.7546 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9227\n",
            "\n",
            "Epoch 00081: val_accuracy did not improve from 0.81778\n",
            "Epoch 82/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2916 - accuracy: 0.8872 - top-2-accuracy: 0.9890 - val_loss: 0.8478 - val_accuracy: 0.7901 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00082: val_accuracy did not improve from 0.81778\n",
            "Epoch 83/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.3373 - accuracy: 0.8808 - top-2-accuracy: 0.9790 - val_loss: 0.8656 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9198\n",
            "\n",
            "Epoch 00083: val_accuracy did not improve from 0.81778\n",
            "Epoch 84/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.3167 - accuracy: 0.8932 - top-2-accuracy: 0.9852 - val_loss: 0.7443 - val_accuracy: 0.7857 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00084: val_accuracy did not improve from 0.81778\n",
            "Epoch 85/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2827 - accuracy: 0.8975 - top-2-accuracy: 0.9882 - val_loss: 0.8462 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00085: val_accuracy did not improve from 0.81778\n",
            "Epoch 86/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2738 - accuracy: 0.9003 - top-2-accuracy: 0.9902 - val_loss: 0.8009 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00086: val_accuracy did not improve from 0.81778\n",
            "Epoch 87/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.2891 - accuracy: 0.8907 - top-2-accuracy: 0.9896 - val_loss: 0.8872 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9417\n",
            "\n",
            "Epoch 00087: val_accuracy did not improve from 0.81778\n",
            "Epoch 88/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2633 - accuracy: 0.9109 - top-2-accuracy: 0.9918 - val_loss: 0.7896 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00088: val_accuracy did not improve from 0.81778\n",
            "Epoch 89/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2726 - accuracy: 0.8987 - top-2-accuracy: 0.9924 - val_loss: 0.8229 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00089: val_accuracy did not improve from 0.81778\n",
            "Epoch 90/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2772 - accuracy: 0.9083 - top-2-accuracy: 0.9861 - val_loss: 0.8356 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00090: val_accuracy did not improve from 0.81778\n",
            "Epoch 91/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.3011 - accuracy: 0.8909 - top-2-accuracy: 0.9894 - val_loss: 0.8404 - val_accuracy: 0.8076 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00091: val_accuracy did not improve from 0.81778\n",
            "Epoch 92/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2598 - accuracy: 0.8996 - top-2-accuracy: 0.9911 - val_loss: 0.8724 - val_accuracy: 0.7828 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00092: val_accuracy did not improve from 0.81778\n",
            "Epoch 93/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2628 - accuracy: 0.9089 - top-2-accuracy: 0.9899 - val_loss: 0.9418 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00093: val_accuracy did not improve from 0.81778\n",
            "Epoch 94/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.2712 - accuracy: 0.9033 - top-2-accuracy: 0.9881 - val_loss: 0.7929 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00094: val_accuracy did not improve from 0.81778\n",
            "Epoch 95/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2640 - accuracy: 0.9019 - top-2-accuracy: 0.9910 - val_loss: 0.8681 - val_accuracy: 0.7813 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00095: val_accuracy did not improve from 0.81778\n",
            "Epoch 96/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.2737 - accuracy: 0.8991 - top-2-accuracy: 0.9884 - val_loss: 0.8528 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00096: val_accuracy did not improve from 0.81778\n",
            "Epoch 97/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.2864 - accuracy: 0.8972 - top-2-accuracy: 0.9863 - val_loss: 0.9050 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00097: val_accuracy did not improve from 0.81778\n",
            "Epoch 98/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2681 - accuracy: 0.8997 - top-2-accuracy: 0.9932 - val_loss: 0.8297 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00098: val_accuracy did not improve from 0.81778\n",
            "Epoch 99/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2577 - accuracy: 0.9090 - top-2-accuracy: 0.9973 - val_loss: 0.8144 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9417\n",
            "\n",
            "Epoch 00099: val_accuracy did not improve from 0.81778\n",
            "Epoch 100/250\n",
            "38/38 [==============================] - 5s 145ms/step - loss: 0.2451 - accuracy: 0.9102 - top-2-accuracy: 0.9930 - val_loss: 0.9351 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00100: val_accuracy did not improve from 0.81778\n",
            "Epoch 101/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.2300 - accuracy: 0.9104 - top-2-accuracy: 0.9934 - val_loss: 0.9362 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00101: val_accuracy did not improve from 0.81778\n",
            "Epoch 102/250\n",
            "38/38 [==============================] - 5s 145ms/step - loss: 0.2485 - accuracy: 0.9098 - top-2-accuracy: 0.9829 - val_loss: 0.9600 - val_accuracy: 0.7653 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00102: val_accuracy did not improve from 0.81778\n",
            "Epoch 103/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.2218 - accuracy: 0.9193 - top-2-accuracy: 0.9935 - val_loss: 0.9089 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00103: val_accuracy did not improve from 0.81778\n",
            "Epoch 104/250\n",
            "38/38 [==============================] - 5s 145ms/step - loss: 0.2111 - accuracy: 0.9262 - top-2-accuracy: 0.9941 - val_loss: 0.9314 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00104: val_accuracy did not improve from 0.81778\n",
            "Epoch 105/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.2414 - accuracy: 0.9175 - top-2-accuracy: 0.9896 - val_loss: 0.9130 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00105: val_accuracy did not improve from 0.81778\n",
            "Epoch 106/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.2164 - accuracy: 0.9266 - top-2-accuracy: 0.9951 - val_loss: 1.0157 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00106: val_accuracy did not improve from 0.81778\n",
            "Epoch 107/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2169 - accuracy: 0.9184 - top-2-accuracy: 0.9911 - val_loss: 0.9334 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00107: val_accuracy did not improve from 0.81778\n",
            "Epoch 108/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1975 - accuracy: 0.9324 - top-2-accuracy: 0.9961 - val_loss: 0.9450 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00108: val_accuracy did not improve from 0.81778\n",
            "Epoch 109/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1959 - accuracy: 0.9316 - top-2-accuracy: 0.9983 - val_loss: 0.9947 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00109: val_accuracy did not improve from 0.81778\n",
            "Epoch 110/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.2460 - accuracy: 0.9100 - top-2-accuracy: 0.9924 - val_loss: 1.0029 - val_accuracy: 0.8003 - val_top-2-accuracy: 0.9402\n",
            "\n",
            "Epoch 00110: val_accuracy did not improve from 0.81778\n",
            "Epoch 111/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1873 - accuracy: 0.9319 - top-2-accuracy: 0.9936 - val_loss: 0.8508 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00111: val_accuracy did not improve from 0.81778\n",
            "Epoch 112/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.2089 - accuracy: 0.9280 - top-2-accuracy: 0.9893 - val_loss: 0.9929 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9213\n",
            "\n",
            "Epoch 00112: val_accuracy did not improve from 0.81778\n",
            "Epoch 113/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2188 - accuracy: 0.9188 - top-2-accuracy: 0.9913 - val_loss: 0.9865 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00113: val_accuracy did not improve from 0.81778\n",
            "Epoch 114/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.2012 - accuracy: 0.9249 - top-2-accuracy: 0.9932 - val_loss: 0.9944 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00114: val_accuracy did not improve from 0.81778\n",
            "Epoch 115/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.2017 - accuracy: 0.9232 - top-2-accuracy: 0.9955 - val_loss: 0.9922 - val_accuracy: 0.8003 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00115: val_accuracy did not improve from 0.81778\n",
            "Epoch 116/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.2053 - accuracy: 0.9293 - top-2-accuracy: 0.9971 - val_loss: 0.9865 - val_accuracy: 0.7828 - val_top-2-accuracy: 0.9184\n",
            "\n",
            "Epoch 00116: val_accuracy did not improve from 0.81778\n",
            "Epoch 117/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.2187 - accuracy: 0.9223 - top-2-accuracy: 0.9912 - val_loss: 0.8993 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9461\n",
            "\n",
            "Epoch 00117: val_accuracy did not improve from 0.81778\n",
            "Epoch 118/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1861 - accuracy: 0.9321 - top-2-accuracy: 0.9952 - val_loss: 1.1118 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00118: val_accuracy did not improve from 0.81778\n",
            "Epoch 119/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1952 - accuracy: 0.9345 - top-2-accuracy: 0.9958 - val_loss: 1.0042 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00119: val_accuracy did not improve from 0.81778\n",
            "Epoch 120/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1895 - accuracy: 0.9323 - top-2-accuracy: 0.9942 - val_loss: 1.2671 - val_accuracy: 0.7813 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00120: val_accuracy did not improve from 0.81778\n",
            "Epoch 121/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.2302 - accuracy: 0.9241 - top-2-accuracy: 0.9944 - val_loss: 1.1040 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00121: val_accuracy did not improve from 0.81778\n",
            "Epoch 122/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1895 - accuracy: 0.9321 - top-2-accuracy: 0.9944 - val_loss: 1.1572 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00122: val_accuracy did not improve from 0.81778\n",
            "Epoch 123/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1869 - accuracy: 0.9371 - top-2-accuracy: 0.9950 - val_loss: 1.1085 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9198\n",
            "\n",
            "Epoch 00123: val_accuracy did not improve from 0.81778\n",
            "Epoch 124/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1756 - accuracy: 0.9421 - top-2-accuracy: 0.9974 - val_loss: 1.1329 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9198\n",
            "\n",
            "Epoch 00124: val_accuracy did not improve from 0.81778\n",
            "Epoch 125/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.2066 - accuracy: 0.9298 - top-2-accuracy: 0.9970 - val_loss: 1.0531 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00125: val_accuracy did not improve from 0.81778\n",
            "Epoch 126/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1657 - accuracy: 0.9448 - top-2-accuracy: 0.9968 - val_loss: 1.1200 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9417\n",
            "\n",
            "Epoch 00126: val_accuracy did not improve from 0.81778\n",
            "Epoch 127/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1579 - accuracy: 0.9446 - top-2-accuracy: 0.9945 - val_loss: 0.9485 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00127: val_accuracy did not improve from 0.81778\n",
            "Epoch 128/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1685 - accuracy: 0.9420 - top-2-accuracy: 0.9953 - val_loss: 1.1063 - val_accuracy: 0.8134 - val_top-2-accuracy: 0.9402\n",
            "\n",
            "Epoch 00128: val_accuracy did not improve from 0.81778\n",
            "Epoch 129/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.2258 - accuracy: 0.9231 - top-2-accuracy: 0.9950 - val_loss: 0.9823 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00129: val_accuracy did not improve from 0.81778\n",
            "Epoch 130/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.2109 - accuracy: 0.9183 - top-2-accuracy: 0.9911 - val_loss: 1.0402 - val_accuracy: 0.7857 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00130: val_accuracy did not improve from 0.81778\n",
            "Epoch 131/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1622 - accuracy: 0.9444 - top-2-accuracy: 0.9946 - val_loss: 1.0176 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00131: val_accuracy did not improve from 0.81778\n",
            "Epoch 132/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1662 - accuracy: 0.9405 - top-2-accuracy: 0.9965 - val_loss: 1.0414 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00132: val_accuracy did not improve from 0.81778\n",
            "Epoch 133/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1695 - accuracy: 0.9343 - top-2-accuracy: 0.9950 - val_loss: 1.0673 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00133: val_accuracy did not improve from 0.81778\n",
            "Epoch 134/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1489 - accuracy: 0.9475 - top-2-accuracy: 0.9978 - val_loss: 1.0244 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00134: val_accuracy did not improve from 0.81778\n",
            "Epoch 135/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1435 - accuracy: 0.9478 - top-2-accuracy: 0.9934 - val_loss: 1.0333 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00135: val_accuracy did not improve from 0.81778\n",
            "Epoch 136/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1730 - accuracy: 0.9457 - top-2-accuracy: 0.9957 - val_loss: 1.0555 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00136: val_accuracy did not improve from 0.81778\n",
            "Epoch 137/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.1631 - accuracy: 0.9441 - top-2-accuracy: 0.9960 - val_loss: 1.0531 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9417\n",
            "\n",
            "Epoch 00137: val_accuracy did not improve from 0.81778\n",
            "Epoch 138/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1423 - accuracy: 0.9484 - top-2-accuracy: 0.9977 - val_loss: 1.1220 - val_accuracy: 0.7770 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00138: val_accuracy did not improve from 0.81778\n",
            "Epoch 139/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1450 - accuracy: 0.9544 - top-2-accuracy: 0.9923 - val_loss: 1.1217 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00139: val_accuracy did not improve from 0.81778\n",
            "Epoch 140/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1324 - accuracy: 0.9516 - top-2-accuracy: 0.9983 - val_loss: 1.0839 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00140: val_accuracy did not improve from 0.81778\n",
            "Epoch 141/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1174 - accuracy: 0.9566 - top-2-accuracy: 0.9992 - val_loss: 1.1844 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00141: val_accuracy did not improve from 0.81778\n",
            "Epoch 142/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1601 - accuracy: 0.9467 - top-2-accuracy: 0.9958 - val_loss: 1.0329 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00142: val_accuracy did not improve from 0.81778\n",
            "Epoch 143/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1447 - accuracy: 0.9469 - top-2-accuracy: 0.9981 - val_loss: 1.0030 - val_accuracy: 0.8090 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00143: val_accuracy did not improve from 0.81778\n",
            "Epoch 144/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1550 - accuracy: 0.9407 - top-2-accuracy: 0.9973 - val_loss: 1.0609 - val_accuracy: 0.7668 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00144: val_accuracy did not improve from 0.81778\n",
            "Epoch 145/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1321 - accuracy: 0.9504 - top-2-accuracy: 0.9989 - val_loss: 1.0406 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00145: val_accuracy did not improve from 0.81778\n",
            "Epoch 146/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1478 - accuracy: 0.9481 - top-2-accuracy: 0.9987 - val_loss: 1.0266 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00146: val_accuracy did not improve from 0.81778\n",
            "Epoch 147/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1542 - accuracy: 0.9430 - top-2-accuracy: 0.9955 - val_loss: 1.0756 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00147: val_accuracy did not improve from 0.81778\n",
            "Epoch 148/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1391 - accuracy: 0.9544 - top-2-accuracy: 0.9970 - val_loss: 1.0460 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9402\n",
            "\n",
            "Epoch 00148: val_accuracy did not improve from 0.81778\n",
            "Epoch 149/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1125 - accuracy: 0.9576 - top-2-accuracy: 0.9967 - val_loss: 1.1174 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00149: val_accuracy did not improve from 0.81778\n",
            "Epoch 150/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1382 - accuracy: 0.9583 - top-2-accuracy: 0.9945 - val_loss: 1.1102 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00150: val_accuracy did not improve from 0.81778\n",
            "Epoch 151/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1214 - accuracy: 0.9573 - top-2-accuracy: 0.9965 - val_loss: 1.1087 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00151: val_accuracy did not improve from 0.81778\n",
            "Epoch 152/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1208 - accuracy: 0.9577 - top-2-accuracy: 0.9945 - val_loss: 1.0804 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00152: val_accuracy did not improve from 0.81778\n",
            "Epoch 153/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1034 - accuracy: 0.9639 - top-2-accuracy: 0.9980 - val_loss: 1.1779 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00153: val_accuracy did not improve from 0.81778\n",
            "Epoch 154/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1291 - accuracy: 0.9623 - top-2-accuracy: 0.9967 - val_loss: 1.0834 - val_accuracy: 0.7770 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00154: val_accuracy did not improve from 0.81778\n",
            "Epoch 155/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1418 - accuracy: 0.9496 - top-2-accuracy: 0.9959 - val_loss: 1.1650 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00155: val_accuracy did not improve from 0.81778\n",
            "Epoch 156/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1170 - accuracy: 0.9557 - top-2-accuracy: 0.9986 - val_loss: 1.1801 - val_accuracy: 0.8003 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00156: val_accuracy did not improve from 0.81778\n",
            "Epoch 157/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1351 - accuracy: 0.9537 - top-2-accuracy: 0.9961 - val_loss: 1.0554 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00157: val_accuracy did not improve from 0.81778\n",
            "Epoch 158/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.0955 - accuracy: 0.9647 - top-2-accuracy: 0.9989 - val_loss: 1.2072 - val_accuracy: 0.7901 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00158: val_accuracy did not improve from 0.81778\n",
            "Epoch 159/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1146 - accuracy: 0.9582 - top-2-accuracy: 0.9983 - val_loss: 1.2127 - val_accuracy: 0.7857 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00159: val_accuracy did not improve from 0.81778\n",
            "Epoch 160/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1153 - accuracy: 0.9592 - top-2-accuracy: 0.9974 - val_loss: 1.0242 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00160: val_accuracy did not improve from 0.81778\n",
            "Epoch 161/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1308 - accuracy: 0.9527 - top-2-accuracy: 0.9985 - val_loss: 1.0490 - val_accuracy: 0.7857 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00161: val_accuracy did not improve from 0.81778\n",
            "Epoch 162/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0861 - accuracy: 0.9679 - top-2-accuracy: 0.9986 - val_loss: 1.2491 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00162: val_accuracy did not improve from 0.81778\n",
            "Epoch 163/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.1167 - accuracy: 0.9569 - top-2-accuracy: 0.9981 - val_loss: 1.1664 - val_accuracy: 0.7828 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00163: val_accuracy did not improve from 0.81778\n",
            "Epoch 164/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1014 - accuracy: 0.9620 - top-2-accuracy: 0.9990 - val_loss: 1.1620 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00164: val_accuracy did not improve from 0.81778\n",
            "Epoch 165/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1586 - accuracy: 0.9525 - top-2-accuracy: 0.9966 - val_loss: 1.0016 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00165: val_accuracy did not improve from 0.81778\n",
            "Epoch 166/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1348 - accuracy: 0.9468 - top-2-accuracy: 0.9974 - val_loss: 1.1526 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00166: val_accuracy did not improve from 0.81778\n",
            "Epoch 167/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1097 - accuracy: 0.9593 - top-2-accuracy: 0.9998 - val_loss: 0.9958 - val_accuracy: 0.8076 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00167: val_accuracy did not improve from 0.81778\n",
            "Epoch 168/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1033 - accuracy: 0.9612 - top-2-accuracy: 0.9978 - val_loss: 1.0486 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00168: val_accuracy did not improve from 0.81778\n",
            "Epoch 169/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1316 - accuracy: 0.9558 - top-2-accuracy: 0.9962 - val_loss: 1.1036 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00169: val_accuracy did not improve from 0.81778\n",
            "Epoch 170/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1223 - accuracy: 0.9570 - top-2-accuracy: 0.9966 - val_loss: 1.1009 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9213\n",
            "\n",
            "Epoch 00170: val_accuracy did not improve from 0.81778\n",
            "Epoch 171/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1087 - accuracy: 0.9647 - top-2-accuracy: 0.9962 - val_loss: 1.1001 - val_accuracy: 0.8061 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00171: val_accuracy did not improve from 0.81778\n",
            "Epoch 172/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1078 - accuracy: 0.9681 - top-2-accuracy: 0.9988 - val_loss: 1.0542 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9402\n",
            "\n",
            "Epoch 00172: val_accuracy did not improve from 0.81778\n",
            "Epoch 173/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0916 - accuracy: 0.9673 - top-2-accuracy: 0.9990 - val_loss: 1.2451 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9227\n",
            "\n",
            "Epoch 00173: val_accuracy did not improve from 0.81778\n",
            "Epoch 174/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0926 - accuracy: 0.9632 - top-2-accuracy: 0.9985 - val_loss: 1.2328 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00174: val_accuracy did not improve from 0.81778\n",
            "Epoch 175/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0760 - accuracy: 0.9709 - top-2-accuracy: 0.9986 - val_loss: 1.2620 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9184\n",
            "\n",
            "Epoch 00175: val_accuracy did not improve from 0.81778\n",
            "Epoch 176/250\n",
            "38/38 [==============================] - 5s 141ms/step - loss: 0.1231 - accuracy: 0.9591 - top-2-accuracy: 0.9967 - val_loss: 1.1879 - val_accuracy: 0.7770 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00176: val_accuracy did not improve from 0.81778\n",
            "Epoch 177/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.1157 - accuracy: 0.9614 - top-2-accuracy: 0.9972 - val_loss: 1.1491 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00177: val_accuracy did not improve from 0.81778\n",
            "Epoch 178/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1399 - accuracy: 0.9537 - top-2-accuracy: 0.9969 - val_loss: 1.1772 - val_accuracy: 0.7668 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00178: val_accuracy did not improve from 0.81778\n",
            "Epoch 179/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1425 - accuracy: 0.9577 - top-2-accuracy: 0.9960 - val_loss: 1.0307 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00179: val_accuracy did not improve from 0.81778\n",
            "Epoch 180/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1065 - accuracy: 0.9644 - top-2-accuracy: 0.9980 - val_loss: 1.1674 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00180: val_accuracy did not improve from 0.81778\n",
            "Epoch 181/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1022 - accuracy: 0.9641 - top-2-accuracy: 0.9998 - val_loss: 1.1927 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00181: val_accuracy did not improve from 0.81778\n",
            "Epoch 182/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.1153 - accuracy: 0.9562 - top-2-accuracy: 0.9965 - val_loss: 1.1359 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00182: val_accuracy did not improve from 0.81778\n",
            "Epoch 183/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0939 - accuracy: 0.9668 - top-2-accuracy: 0.9982 - val_loss: 1.1327 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00183: val_accuracy did not improve from 0.81778\n",
            "Epoch 184/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1122 - accuracy: 0.9610 - top-2-accuracy: 0.9984 - val_loss: 1.2710 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9417\n",
            "\n",
            "Epoch 00184: val_accuracy did not improve from 0.81778\n",
            "Epoch 185/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0907 - accuracy: 0.9611 - top-2-accuracy: 0.9996 - val_loss: 1.1446 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00185: val_accuracy did not improve from 0.81778\n",
            "Epoch 186/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0827 - accuracy: 0.9707 - top-2-accuracy: 0.9995 - val_loss: 1.0904 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9402\n",
            "\n",
            "Epoch 00186: val_accuracy did not improve from 0.81778\n",
            "Epoch 187/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1211 - accuracy: 0.9589 - top-2-accuracy: 0.9995 - val_loss: 1.2394 - val_accuracy: 0.8061 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00187: val_accuracy did not improve from 0.81778\n",
            "Epoch 188/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1204 - accuracy: 0.9557 - top-2-accuracy: 0.9956 - val_loss: 1.0632 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00188: val_accuracy did not improve from 0.81778\n",
            "Epoch 189/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0974 - accuracy: 0.9684 - top-2-accuracy: 0.9987 - val_loss: 1.1127 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00189: val_accuracy did not improve from 0.81778\n",
            "Epoch 190/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1251 - accuracy: 0.9575 - top-2-accuracy: 0.9967 - val_loss: 1.0386 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00190: val_accuracy did not improve from 0.81778\n",
            "Epoch 191/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0953 - accuracy: 0.9680 - top-2-accuracy: 0.9987 - val_loss: 1.1585 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00191: val_accuracy did not improve from 0.81778\n",
            "Epoch 192/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0812 - accuracy: 0.9749 - top-2-accuracy: 0.9994 - val_loss: 1.1201 - val_accuracy: 0.7828 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00192: val_accuracy did not improve from 0.81778\n",
            "Epoch 193/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0906 - accuracy: 0.9645 - top-2-accuracy: 0.9986 - val_loss: 1.0963 - val_accuracy: 0.7799 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00193: val_accuracy did not improve from 0.81778\n",
            "Epoch 194/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0903 - accuracy: 0.9710 - top-2-accuracy: 0.9984 - val_loss: 1.3112 - val_accuracy: 0.7843 - val_top-2-accuracy: 0.9155\n",
            "\n",
            "Epoch 00194: val_accuracy did not improve from 0.81778\n",
            "Epoch 195/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0790 - accuracy: 0.9695 - top-2-accuracy: 0.9999 - val_loss: 1.2250 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00195: val_accuracy did not improve from 0.81778\n",
            "Epoch 196/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0851 - accuracy: 0.9725 - top-2-accuracy: 0.9982 - val_loss: 1.3096 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9461\n",
            "\n",
            "Epoch 00196: val_accuracy did not improve from 0.81778\n",
            "Epoch 197/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0882 - accuracy: 0.9674 - top-2-accuracy: 0.9989 - val_loss: 1.2467 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00197: val_accuracy did not improve from 0.81778\n",
            "Epoch 198/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0929 - accuracy: 0.9691 - top-2-accuracy: 0.9982 - val_loss: 1.1183 - val_accuracy: 0.7988 - val_top-2-accuracy: 0.9446\n",
            "\n",
            "Epoch 00198: val_accuracy did not improve from 0.81778\n",
            "Epoch 199/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0762 - accuracy: 0.9704 - top-2-accuracy: 0.9993 - val_loss: 1.1969 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9402\n",
            "\n",
            "Epoch 00199: val_accuracy did not improve from 0.81778\n",
            "Epoch 200/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.1066 - accuracy: 0.9647 - top-2-accuracy: 0.9967 - val_loss: 1.0668 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9417\n",
            "\n",
            "Epoch 00200: val_accuracy did not improve from 0.81778\n",
            "Epoch 201/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0871 - accuracy: 0.9676 - top-2-accuracy: 0.9992 - val_loss: 1.1718 - val_accuracy: 0.8076 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00201: val_accuracy did not improve from 0.81778\n",
            "Epoch 202/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0707 - accuracy: 0.9762 - top-2-accuracy: 0.9979 - val_loss: 1.1403 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9417\n",
            "\n",
            "Epoch 00202: val_accuracy did not improve from 0.81778\n",
            "Epoch 203/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0590 - accuracy: 0.9795 - top-2-accuracy: 0.9997 - val_loss: 1.3558 - val_accuracy: 0.7901 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00203: val_accuracy did not improve from 0.81778\n",
            "Epoch 204/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0749 - accuracy: 0.9735 - top-2-accuracy: 1.0000 - val_loss: 1.2092 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9446\n",
            "\n",
            "Epoch 00204: val_accuracy did not improve from 0.81778\n",
            "Epoch 205/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0819 - accuracy: 0.9716 - top-2-accuracy: 0.9981 - val_loss: 1.3044 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00205: val_accuracy did not improve from 0.81778\n",
            "Epoch 206/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.1129 - accuracy: 0.9598 - top-2-accuracy: 0.9979 - val_loss: 1.1551 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00206: val_accuracy did not improve from 0.81778\n",
            "Epoch 207/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0845 - accuracy: 0.9697 - top-2-accuracy: 0.9992 - val_loss: 1.1199 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9431\n",
            "\n",
            "Epoch 00207: val_accuracy did not improve from 0.81778\n",
            "Epoch 208/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0991 - accuracy: 0.9721 - top-2-accuracy: 0.9981 - val_loss: 1.2500 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00208: val_accuracy did not improve from 0.81778\n",
            "Epoch 209/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0725 - accuracy: 0.9748 - top-2-accuracy: 0.9983 - val_loss: 1.2274 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00209: val_accuracy did not improve from 0.81778\n",
            "Epoch 210/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0932 - accuracy: 0.9679 - top-2-accuracy: 1.0000 - val_loss: 1.1818 - val_accuracy: 0.8003 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00210: val_accuracy did not improve from 0.81778\n",
            "Epoch 211/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0726 - accuracy: 0.9702 - top-2-accuracy: 0.9980 - val_loss: 1.2563 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00211: val_accuracy did not improve from 0.81778\n",
            "Epoch 212/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0842 - accuracy: 0.9692 - top-2-accuracy: 0.9986 - val_loss: 1.1678 - val_accuracy: 0.8105 - val_top-2-accuracy: 0.9490\n",
            "\n",
            "Epoch 00212: val_accuracy did not improve from 0.81778\n",
            "Epoch 213/250\n",
            "38/38 [==============================] - 5s 145ms/step - loss: 0.0703 - accuracy: 0.9745 - top-2-accuracy: 0.9951 - val_loss: 1.3855 - val_accuracy: 0.7799 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00213: val_accuracy did not improve from 0.81778\n",
            "Epoch 214/250\n",
            "38/38 [==============================] - 5s 145ms/step - loss: 0.0755 - accuracy: 0.9791 - top-2-accuracy: 0.9988 - val_loss: 1.4391 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00214: val_accuracy did not improve from 0.81778\n",
            "Epoch 215/250\n",
            "38/38 [==============================] - 6s 146ms/step - loss: 0.1012 - accuracy: 0.9729 - top-2-accuracy: 0.9977 - val_loss: 1.2567 - val_accuracy: 0.7828 - val_top-2-accuracy: 0.9227\n",
            "\n",
            "Epoch 00215: val_accuracy did not improve from 0.81778\n",
            "Epoch 216/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.1161 - accuracy: 0.9646 - top-2-accuracy: 0.9975 - val_loss: 1.2729 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9257\n",
            "\n",
            "Epoch 00216: val_accuracy did not improve from 0.81778\n",
            "Epoch 217/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.1065 - accuracy: 0.9672 - top-2-accuracy: 0.9973 - val_loss: 1.1939 - val_accuracy: 0.8003 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00217: val_accuracy did not improve from 0.81778\n",
            "Epoch 218/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0809 - accuracy: 0.9721 - top-2-accuracy: 0.9991 - val_loss: 1.2180 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00218: val_accuracy did not improve from 0.81778\n",
            "Epoch 219/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0916 - accuracy: 0.9698 - top-2-accuracy: 0.9990 - val_loss: 1.3119 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00219: val_accuracy did not improve from 0.81778\n",
            "Epoch 220/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0937 - accuracy: 0.9670 - top-2-accuracy: 0.9994 - val_loss: 1.2509 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00220: val_accuracy did not improve from 0.81778\n",
            "Epoch 221/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0667 - accuracy: 0.9763 - top-2-accuracy: 0.9988 - val_loss: 1.4124 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00221: val_accuracy did not improve from 0.81778\n",
            "Epoch 222/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0905 - accuracy: 0.9685 - top-2-accuracy: 0.9975 - val_loss: 1.2340 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9461\n",
            "\n",
            "Epoch 00222: val_accuracy did not improve from 0.81778\n",
            "Epoch 223/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0760 - accuracy: 0.9750 - top-2-accuracy: 0.9995 - val_loss: 1.4222 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00223: val_accuracy did not improve from 0.81778\n",
            "Epoch 224/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0638 - accuracy: 0.9764 - top-2-accuracy: 0.9999 - val_loss: 1.1999 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00224: val_accuracy did not improve from 0.81778\n",
            "Epoch 225/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0892 - accuracy: 0.9713 - top-2-accuracy: 0.9989 - val_loss: 1.2040 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9402\n",
            "\n",
            "Epoch 00225: val_accuracy did not improve from 0.81778\n",
            "Epoch 226/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0636 - accuracy: 0.9782 - top-2-accuracy: 0.9967 - val_loss: 1.3681 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9402\n",
            "\n",
            "Epoch 00226: val_accuracy did not improve from 0.81778\n",
            "Epoch 227/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0533 - accuracy: 0.9837 - top-2-accuracy: 0.9984 - val_loss: 1.2368 - val_accuracy: 0.7813 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00227: val_accuracy did not improve from 0.81778\n",
            "Epoch 228/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0724 - accuracy: 0.9729 - top-2-accuracy: 0.9983 - val_loss: 1.2891 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9213\n",
            "\n",
            "Epoch 00228: val_accuracy did not improve from 0.81778\n",
            "Epoch 229/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0614 - accuracy: 0.9774 - top-2-accuracy: 0.9992 - val_loss: 1.4372 - val_accuracy: 0.8105 - val_top-2-accuracy: 0.9359\n",
            "\n",
            "Epoch 00229: val_accuracy did not improve from 0.81778\n",
            "Epoch 230/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0748 - accuracy: 0.9764 - top-2-accuracy: 0.9983 - val_loss: 1.2268 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00230: val_accuracy did not improve from 0.81778\n",
            "Epoch 231/250\n",
            "38/38 [==============================] - 5s 145ms/step - loss: 0.0775 - accuracy: 0.9750 - top-2-accuracy: 0.9968 - val_loss: 1.2706 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00231: val_accuracy did not improve from 0.81778\n",
            "Epoch 232/250\n",
            "38/38 [==============================] - 5s 145ms/step - loss: 0.0661 - accuracy: 0.9769 - top-2-accuracy: 0.9988 - val_loss: 1.3067 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00232: val_accuracy did not improve from 0.81778\n",
            "Epoch 233/250\n",
            "38/38 [==============================] - 5s 145ms/step - loss: 0.0767 - accuracy: 0.9703 - top-2-accuracy: 0.9972 - val_loss: 1.3212 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00233: val_accuracy did not improve from 0.81778\n",
            "Epoch 234/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0647 - accuracy: 0.9759 - top-2-accuracy: 0.9997 - val_loss: 1.2772 - val_accuracy: 0.7915 - val_top-2-accuracy: 0.9315\n",
            "\n",
            "Epoch 00234: val_accuracy did not improve from 0.81778\n",
            "Epoch 235/250\n",
            "38/38 [==============================] - 6s 145ms/step - loss: 0.0814 - accuracy: 0.9734 - top-2-accuracy: 0.9972 - val_loss: 1.3332 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00235: val_accuracy did not improve from 0.81778\n",
            "Epoch 236/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0701 - accuracy: 0.9733 - top-2-accuracy: 1.0000 - val_loss: 1.3941 - val_accuracy: 0.8061 - val_top-2-accuracy: 0.9242\n",
            "\n",
            "Epoch 00236: val_accuracy did not improve from 0.81778\n",
            "Epoch 237/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0838 - accuracy: 0.9734 - top-2-accuracy: 0.9989 - val_loss: 1.2402 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9329\n",
            "\n",
            "Epoch 00237: val_accuracy did not improve from 0.81778\n",
            "Epoch 238/250\n",
            "38/38 [==============================] - 6s 145ms/step - loss: 0.0612 - accuracy: 0.9779 - top-2-accuracy: 0.9999 - val_loss: 1.2930 - val_accuracy: 0.8047 - val_top-2-accuracy: 0.9286\n",
            "\n",
            "Epoch 00238: val_accuracy did not improve from 0.81778\n",
            "Epoch 239/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0969 - accuracy: 0.9608 - top-2-accuracy: 0.9997 - val_loss: 1.2372 - val_accuracy: 0.7872 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00239: val_accuracy did not improve from 0.81778\n",
            "Epoch 240/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.1037 - accuracy: 0.9694 - top-2-accuracy: 0.9942 - val_loss: 1.2495 - val_accuracy: 0.8090 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00240: val_accuracy did not improve from 0.81778\n",
            "Epoch 241/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0712 - accuracy: 0.9737 - top-2-accuracy: 0.9986 - val_loss: 1.2390 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9213\n",
            "\n",
            "Epoch 00241: val_accuracy did not improve from 0.81778\n",
            "Epoch 242/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0650 - accuracy: 0.9805 - top-2-accuracy: 0.9994 - val_loss: 1.3053 - val_accuracy: 0.7886 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00242: val_accuracy did not improve from 0.81778\n",
            "Epoch 243/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0861 - accuracy: 0.9696 - top-2-accuracy: 0.9965 - val_loss: 1.2930 - val_accuracy: 0.8090 - val_top-2-accuracy: 0.9271\n",
            "\n",
            "Epoch 00243: val_accuracy did not improve from 0.81778\n",
            "Epoch 244/250\n",
            "38/38 [==============================] - 5s 143ms/step - loss: 0.0994 - accuracy: 0.9673 - top-2-accuracy: 0.9989 - val_loss: 1.3401 - val_accuracy: 0.8017 - val_top-2-accuracy: 0.9388\n",
            "\n",
            "Epoch 00244: val_accuracy did not improve from 0.81778\n",
            "Epoch 245/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0828 - accuracy: 0.9731 - top-2-accuracy: 0.9987 - val_loss: 1.2739 - val_accuracy: 0.7974 - val_top-2-accuracy: 0.9417\n",
            "\n",
            "Epoch 00245: val_accuracy did not improve from 0.81778\n",
            "Epoch 246/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.1011 - accuracy: 0.9607 - top-2-accuracy: 0.9983 - val_loss: 1.2827 - val_accuracy: 0.8032 - val_top-2-accuracy: 0.9446\n",
            "\n",
            "Epoch 00246: val_accuracy did not improve from 0.81778\n",
            "Epoch 247/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0657 - accuracy: 0.9755 - top-2-accuracy: 0.9988 - val_loss: 1.1679 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00247: val_accuracy did not improve from 0.81778\n",
            "Epoch 248/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0798 - accuracy: 0.9716 - top-2-accuracy: 0.9979 - val_loss: 1.1514 - val_accuracy: 0.7930 - val_top-2-accuracy: 0.9300\n",
            "\n",
            "Epoch 00248: val_accuracy did not improve from 0.81778\n",
            "Epoch 249/250\n",
            "38/38 [==============================] - 5s 144ms/step - loss: 0.0669 - accuracy: 0.9758 - top-2-accuracy: 0.9998 - val_loss: 1.3011 - val_accuracy: 0.7945 - val_top-2-accuracy: 0.9373\n",
            "\n",
            "Epoch 00249: val_accuracy did not improve from 0.81778\n",
            "Epoch 250/250\n",
            "38/38 [==============================] - 5s 142ms/step - loss: 0.0675 - accuracy: 0.9746 - top-2-accuracy: 0.9980 - val_loss: 1.4456 - val_accuracy: 0.7959 - val_top-2-accuracy: 0.9344\n",
            "\n",
            "Epoch 00250: val_accuracy did not improve from 0.81778\n",
            "22/22 [==============================] - 1s 34ms/step - loss: 0.6456 - accuracy: 0.8178 - top-2-accuracy: 0.9257\n",
            "--Evaluate--\n",
            "1/1 [==============================] - 6s 6s/step - loss: 0.6456 - accuracy: 0.8178 - top-2-accuracy: 0.9257\n",
            "Test top-1 accuracy: 81.78%\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1905: UserWarning: `Model.predict_generator` is deprecated and will be removed in a future version. Please use `Model.predict`, which supports generators.\n",
            "  warnings.warn('`Model.predict_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Confusion Matrix\n",
            "[[  0   0   0   1  42]\n",
            " [  0  18   0   1  25]\n",
            " [  0   2   1   0  36]\n",
            " [  0   2   0  26   9]\n",
            " [  0   5   0   2 516]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5pXmqDdjsdBQ"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}